{"version":3,"sources":["components/Card.js","components/Deck.js","works/elephant.png","works/piggy.png","works/bricks.png","App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","hasPrint","type","setType","fade","useSpring","opacity","from","useEffect","div","style","className","src","image","title","DropdownButton","id","variant","Dropdown","Item","as","onClick","ItemText","hasSignedPrint","hasOriginal","date","soldPrint","soldSignedPrint","Button","size","printPrice","signedPrintPrice","originalPrice","Deck","array","arr","map","card","key","description","totalSignedPrint","solOriginal","soldOriginal","price","App","objectFactory","cardsArray","elephant","piggy","bricks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74087c46.chunk.js","sourcesContent":["import react, { useEffect, useState } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { useDrag } from 'react-use-gesture';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport '../styles/Card.scss';\r\n\r\nconst Card = (props) => {\r\n\r\n    const [type, setType] = useState(() => {\r\n        if (props.hasPrint) {\r\n            return 'print';\r\n        } else {\r\n            return 'print sold out';\r\n        }\r\n    });\r\n    \r\n    \r\n    const fade = useSpring({opacity: 1, from: {opacity: 0}})\r\n\r\n    const setColor = async () => {\r\n        document.getElementsByClassName(\"card\")[props.id].style.backgroundColor = props.color;\r\n    }\r\n    \r\n    useEffect(() => {\r\n    })\r\n\r\n    return (\r\n        <animated.div style={fade} className=\"test\">\r\n                <img className=\"image\" src={props.image} />\r\n                <div className=\"title-area\">\r\n                    <h1>{props.title}</h1>\r\n                    <DropdownButton id=\"drop\" variant=\"info\" title={type}>\r\n                        {props.hasPrint ? <Dropdown.Item as=\"button\" onClick={() => setType('print')}>print</Dropdown.Item> : <Dropdown.ItemText>print sold out</Dropdown.ItemText>}\r\n                        {props.hasSignedPrint ? <Dropdown.Item as=\"button\" onClick={() => setType('signed print')}>signed print</Dropdown.Item> : <Dropdown.ItemText>signed print s/o</Dropdown.ItemText>}\r\n                        {props.hasOriginal ? <Dropdown.Item as=\"button\" onClick={() => setType('original')}>original</Dropdown.Item> : <Dropdown.ItemText>original s/o</Dropdown.ItemText>}\r\n                    </DropdownButton>\r\n                </div>\r\n            <h3 className=\"date\">{props.date}</h3>\r\n\r\n            {type === 'print' ? <h6 className=\"description\">{props.soldPrint} / âˆž sold</h6> : <span></span>}\r\n            {type === 'signed print' ? <h6 className=\"description\">{props.soldSignedPrint} / 20 sold</h6> : <span></span>}\r\n            {type === 'original' ? <h6 className=\"description\">0 / 1 sold</h6> : <span></span>}\r\n\r\n            {type === 'print' ? <Button id=\"buy-button\" variant=\"outline-info\" size=\"md\">buy ${props.printPrice}</Button> : <span></span>}\r\n            {type === 'signed print' ? <Button id=\"buy-button\" variant=\"outline-info\" size=\"md\">buy ${props.signedPrintPrice}</Button> : <span></span>}\r\n            {type === 'original' ? <Button id=\"buy-button\" variant=\"outline-info\" size=\"md\">buy ${props.originalPrice}</Button> : <span></span>}\r\n        </animated.div>\r\n    )\r\n}\r\n\r\nexport default Card;","import { arrayTypeAnnotation } from '@babel/types';\r\nimport React, { useState } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { useDrag } from 'react-use-gesture';\r\nimport Card from './Card.js';\r\nimport '../styles/Deck.scss';\r\n\r\nconst Deck = (array) => {\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            {\r\n                array.arr.map((card, key) => {\r\n                    return <Card\r\n                        id={key}\r\n                        image={card.image}\r\n                        title={card.title}\r\n                        date={card.date}\r\n                        description={card.description}\r\n                        hasPrint={card.hasPrint}\r\n                        printPrice={card.printPrice}\r\n                        soldPrint={card.soldPrint}\r\n                        hasSignedPrint={card.hasSignedPrint}\r\n                        signedPrintPrice={card.signedPrintPrice}\r\n                        totalSignedPrint={card.totalSignedPrint}\r\n                        soldSignedPrint={card.soldSignedPrint}\r\n                        hasOriginal={card.hasOriginal}\r\n                        originalPrice={card.originalPrice}\r\n                        solOriginal={card.soldOriginal}\r\n                        price={card.price}\r\n                        />\r\n                    }\r\n                )\r\n            }\r\n           \r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default Deck;","export default __webpack_public_path__ + \"static/media/elephant.35214cf4.png\";","export default __webpack_public_path__ + \"static/media/piggy.def2030a.png\";","export default __webpack_public_path__ + \"static/media/bricks.1e17d08d.png\";","import react from 'react';\nimport Deck from './components/Deck.js';\nimport './styles/App.scss';\nimport elephant from './works/elephant.png';\nimport piggy from './works/piggy.png';\nimport bricks from './works/bricks.png';\n\nfunction App() {\n\n  const objectFactory = ( image, title, date, description, hasPrint, printPrice, soldPrint, hasSignedPrint, signedPrintPrice, totalSignedPrint, soldSignedPrint, hasOriginal, originalPrice, soldOriginal ) => {\n    return {\n      image: image,\n      title: title,\n      date: date,\n      description: description,\n      hasPrint: hasPrint,\n      printPrice: printPrice,\n      soldPrint: soldPrint,\n      hasSignedPrint: hasSignedPrint,\n      signedPrintPrice: signedPrintPrice,\n      totalSignedPrint: totalSignedPrint,\n      soldSignedPrint: soldSignedPrint,\n      hasOriginal: hasOriginal,\n      originalPrice: originalPrice,\n      soldOriginal: soldOriginal\n    }\n  }\n\n  const cardsArray = [\n    objectFactory(elephant, 'elephant', '12.18.20', 'blank desc', true, 12, 0, true, 39, 20, 0, true, 99, false),\n    objectFactory(piggy, 'piggy', '08.30.20', 'blank desc', true, 12, 0, true, 39, 20, 0, false, 0, false),\n    objectFactory(bricks, 'brickwaves', '06.30.18', 'blank desc', true, 8, 0, false, 0, 0, 0, false, 0, false)\n  ]\n\n  return (\n    <div className=\"main\">\n      <Deck arr={cardsArray}/>\n    </div>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}